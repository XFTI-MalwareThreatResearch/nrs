# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_zlibnsis')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_zlibnsis')
    _zlibnsis = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_zlibnsis', [dirname(__file__)])
        except ImportError:
            import _zlibnsis
            return _zlibnsis
        try:
            _mod = imp.load_module('_zlibnsis', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _zlibnsis = swig_import_helper()
    del swig_import_helper
else:
    import _zlibnsis
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def ZLIB_Init():
    return _zlibnsis.ZLIB_Init()
ZLIB_Init = _zlibnsis.ZLIB_Init

def ZLIB_Free(s):
    return _zlibnsis.ZLIB_Free(s)
ZLIB_Free = _zlibnsis.ZLIB_Free

def ZLIB_Decompress(s):
    return _zlibnsis.ZLIB_Decompress(s)
ZLIB_Decompress = _zlibnsis.ZLIB_Decompress

def ZLIB_GetNextOut(s):
    return _zlibnsis.ZLIB_GetNextOut(s)
ZLIB_GetNextOut = _zlibnsis.ZLIB_GetNextOut

def ZLIB_GetAvailIn(s):
    return _zlibnsis.ZLIB_GetAvailIn(s)
ZLIB_GetAvailIn = _zlibnsis.ZLIB_GetAvailIn

def ZLIB_GetAvailOut(s):
    return _zlibnsis.ZLIB_GetAvailOut(s)
ZLIB_GetAvailOut = _zlibnsis.ZLIB_GetAvailOut

def ZLIB_SetInBuffer(s, data):
    return _zlibnsis.ZLIB_SetInBuffer(s, data)
ZLIB_SetInBuffer = _zlibnsis.ZLIB_SetInBuffer

def ZLIB_SetOutBuffer(s, data):
    return _zlibnsis.ZLIB_SetOutBuffer(s, data)
ZLIB_SetOutBuffer = _zlibnsis.ZLIB_SetOutBuffer

AMT_CHUNK = 0x4000
Z_OK = 0
Z_STREAM_END = 1

class ZlibException(Exception):
  pass

def decompress(data):
  try:
    state = ZLIB_Init()
    ZLIB_SetInBuffer(state, data)

    outbuf = bytearray(AMT_CHUNK)
    out = bytearray()
    amt_left = len(data)
    err = 0
    while amt_left > 0 or err != Z_STREAM_END:
      ZLIB_SetOutBuffer(state, outbuf)
      out1 = ZLIB_GetNextOut(state)
      in1 = int(ZLIB_GetAvailIn(state))
      err = ZLIB_Decompress(state)
      processed = in1 - int(ZLIB_GetAvailIn(state))
      amt_decomp = int(ZLIB_GetNextOut(state)) - int(out1)
      if err != Z_OK or err == Z_STREAM_END:
        if err == Z_STREAM_END:
          out += outbuf[:amt_decomp]
        break
      amt_left -= processed

      out += outbuf[:amt_decomp]
  finally:
    ZLIB_Free(state)
  return out

# This file is compatible with both classic and new-style classes.


